import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'

import styles from '../styles/Home.module.css'
import { Book } from './api/books';

import { request, RequestDocument } from 'graphql-request'
import useSWR from 'swr'

// This very much helped by https://thewebdevcoach.com/i-migrated-away-from-apollo-client-to-vercel-swr-and-prisma-graphql-request...and-you-can-too!


const fetcher = (query: any) => request('http://localhost:4000/graphiql', query)

const GET_BOOKS = 'query{books {id author title}}';
const SET_BOOK = `
mutation createBook($title: String!, $author: String!) {
  createBook(title:$title, author: $author) {
    id
    title
    author
  }
}
`;
const RM_BOOK = `
mutation deleteBook($id: Int!, $title: String!, $author: String!) {
  deleteBook(id:$id, title:$title, author: $author) {
    id
    title
    author
  }
}
`;
const UPDATE_BOOK = `
mutation updateBook($id: Int!, $title: String!, $author: String!) {
  updateBook(id:$id, title:$title, author: $author) {
    id
    title
    author
  }
}
`;

// export async function getServerSideProps() {
//   // Fetch data from external API
//   const res = await fetch('http://localhost:3000/api/books');
//   const rawData = await res.json()
//   // Pass data to the page via props
//   const books = rawData.data.books;
//   return { props: { books } }
// }

const updateKeyPress = (book: Book, e: any, mutate: Function, author = false) => {
  if (e.key != 'Enter') {
    return;
  }
  const valueEntered: string = e.target.value;
  if (author) {
    book.author = valueEntered;
  } else {
    book.title = valueEntered;
  }
  swrAction(mutate, UPDATE_BOOK, book);
}

const insertKeyPress = (e: any, mutate: Function) => {
  if (e.key != 'Enter') {
    return;
  }
  const newBook: Book = newBookFromInput();
  swrAction(mutate, SET_BOOK, newBook);
}

const newBookFromInput = (): Book => {
  const newAuthEl = document.getElementById('newAuthor') as HTMLInputElement;
  const author = newAuthEl.value;
  const newTitleEl = document.getElementById('newTitle') as HTMLInputElement;
  const title = newTitleEl.value;
  const newBook: Book = { title, author }
  console.log(newBook);
  newAuthEl.value = '';
  newTitleEl.value = '';
  newTitleEl.focus();
  return newBook;
}

const swrAction = async (mutate: Function, action: RequestDocument, book: Book) => {
  const rest = await request('http://localhost:4000/graphiql', action, { id: book.id, title: book.title, author: book.author });
  mutate();
};

const Home: NextPage = (props: any) => {
  const { data, error, mutate } = useSWR(
    GET_BOOKS,
    fetcher
  );
  if (error) {
    console.error('error', error);
  } else {
    console.log('fetched ', data);
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1 className={styles.title}>
        Books, books and books.
      </h1>
      <main className='bg-white'>
        <div className="grid grid gap-1 grid-cols-3 py-6">
          <h1 className='text-xs font-semibold inline-block py-1 px-2 uppercase rounded text-yellow-600  uppercase last:mr-0 mr-1'>Title</h1>
          <h1 className='text-xs font-semibold inline-block py-1 px-2 uppercase rounded text-yellow-600  uppercase last:mr-0 mr-1'>Author</h1>
          <h1 className='text-xs font-semibold inline-block py-1 px-2 uppercase rounded text-yellow-600  uppercase last:mr-0 mr-1'>Delete</h1>
        </div>
        {data?.books?.map(
          (book: Book, index: number) =>
            <>
              <div key={index + '' + book.id} className="grid grid gap-1 grid-cols-3">
                <input
                  id={'title' + book.id}
                  className='w-5/6 max-w-100 p-1 rounded border-1'
                  onKeyPress={(e) => updateKeyPress(book, e, mutate)}
                  placeholder={'Title #' + (book.id)}
                  defaultValue={book.title}
                ></input>
                <input
                  id={'author' + book.id}
                  className='w-5/6 max-w-100 p-1 rounded border-1'
                  onKeyPress={(e) => updateKeyPress(book, e, mutate, true)}
                  placeholder={'Author #' + (book.id)}
                  defaultValue={book.author}
                ></input>
                <button className='mr-auto bg-red-500 hover:bg-red-700 text-white text-center m-1 py-2 px-4 rounded-full' onClick={e => swrAction(mutate, RM_BOOK, book)}>X</button>
              </div>
            </>
        )}
        <div className="grid grid gap-1 pt-5 grid-cols-2">
          <input
            id={'newTitle'}
            className='shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'
            onKeyPress={(e) => insertKeyPress(e, mutate)}
            placeholder={'New Title'}
          ></input>
          <input
            id='newAuthor'
            className='w-5/6 shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'
            onKeyPress={(e) => insertKeyPress(e, mutate)}
            placeholder='New Author '
          ></input>
        </div>
        <label className="float-right m-4 text-xs font-semibold inline-block py-1 px-2 uppercase rounded text-yellow-600 bg-yellow-200 uppercase last:mr-0 mr-1">
          Press enter to submit
        </label>

      </main>

      <footer className='absolute bottom-0 right-1/2'>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Home
